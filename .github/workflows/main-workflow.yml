name: "Main workflow"
on:
  push:
    branches:
      - main
    paths-ignore:
      - '.gitignore'
      - 'README.md'
      - '.github/*'
  pull_request:
    paths-ignore:
      - '.gitignore'
      - 'README.md'
env:
  app_name: obs_collections_generator
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
jobs:
  tag_validation:
    name: Tag validation
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.split.outputs._0 }}
    steps:
      - uses: actions/checkout@v2
      - name: Get the version from the pubspec
        id: pubspec_version
        uses: CumulusDS/get-yaml-paths-action@v0.1.0
        with:
          file: pubspec.yaml
          version: version
      - uses: jungwinter/split@v1
        id: split
        with:
          msg: ${{ steps.pubspec_version.outputs.version }}
          seperator: '+'
      - name: Validate that version doesn't exists
        uses: mukunku/tag-exists-action@v1.0.0
        id: check_tag
        with:
          tag: ${{ steps.split.outputs._0 }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - if: ${{ steps.check_tag.outputs.exists == 'true' && github.event_name == 'pull_request' }}
        name: Post comment on PR
        run: |
          gh pr comment ${{ github.event.pull_request.number }} -b '${{ steps.split.outputs._0 }} already exists, please update the pubspec version.'
          exit 1
#      - if: ${{ steps.check_tag.outputs.exists == 'true' }}
#        name: Fails because the tag already exists.
#        run: exit 1
  testing:
    name: Tests, analyse and format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout project
        uses: actions/checkout@v2
      - name: Setup Dart SDK
        uses: dart-lang/setup-dart@v1.3
      - name: Get dependencies
        run: dart pub get
      - name: Format files in lib, test and bin directories
        run: dart format lib test bin
      - name: Commit formatted files
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          file_pattern: "*.dart"
          commit_user_name: github-actions[bot]
          commit_user_email: 41898282+github-actions[bot]@users.noreply.github.com
          commit_message: "BOT Applying dart format."
          add_options: '-u'
      - name: Analyse code
        run: dart analyze
      - name: Execute tests
        run: dart test
  build:
    name: Build the CLI for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        target: [ linux, macos, windows ]
        include:
          - target: linux
            os: ubuntu-latest
            executable_extension: ''
          - target: macos
            os: macos-latest
            executable_extension: ''
          - target: windows
            os: windows-latest
            executable_extension: '.exe'
    needs:
      - testing
    steps:
      - name: Checkout project
        uses: actions/checkout@v2
      - name: Setup Dart SDK
        uses: dart-lang/setup-dart@v1.3
      - name: Get dependencies
        run: dart pub get
      - name: Building executable
        run: dart compile exe bin/obs_collections_generator.dart -o ${{ env.app_name }}_${{ matrix.target }}${{ matrix.executable_extension }}
      - name: Upload ${{ matrix.target }} build
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.target }}_build
          path: ${{ github.workspace }}/${{ matrix.output }}
  create_release:
    name: Github pre-release
    if: ${{ github.event_name == 'push' }}
    runs-on: ubuntu-latest
    needs:
      - tag_validation
      - build
    steps:
      - name: Download Windows build
        uses: actions/download-artifact@v2
        with:
          name: windows_build
      - name: Download Linux build
        uses: actions/download-artifact@v2
        with:
          name: linux_build
      - name: Download MacOS build
        uses: actions/download-artifact@v2
        with:
          name: macos_build
      - name: Create pre-release
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          automatic_release_tag: ${{ needs.tag_validation.outputs.version }}
          prerelease: true
          title: v${{ needs.tag_validation.outputs.version }}
          files: |
            ${{ env.app_name }}_linux
            ${{ env.app_name }}_macos
            ${{ env.app_name }}_windows.exe
